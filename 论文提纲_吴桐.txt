题目：路由协议自动化配置系统――业务逻辑层和数据层的设计与实现
第一章 引言
       1.1 项目背景
           IBM测试路由协议的需要，繁琐的重复性的手动配置路由协议的方式，存在哪些问题，自动化工具的需要，tcl实现的问题与不足。
           我们在原有的需求和设计上重新进行审视，采用python和加入可视化操作的优势和好处（操作直观，友好的交互，封装底层数据结构，python v.s. tcl，以及扩展性增强等等）

       1.2 国内外研究现状
           自动化脚本工具的开发，路由协议的测试

       1.3 项目开发里程碑
           开发环境的搭建；
           GNS3虚拟路由的测试平台搭建；
           Python脚本配置GNS3虚拟路由；前端实现拖拽功能；
           Java调用Python脚本配置成功；前端实现连线功能；
           XML解析后调用脚本配置成功； 前端实现端口数据输入功能；
           前后台集成成功――由前台构建拓扑图并输入相关信息，点击Config，后台自动化配置
           日志模块的加入
           前端实现Import、Save功能
           测试模块的加入
 
       1.4 论文的主要工作与组织结构

第二章 项目技术概述
       2.1 XML技术
       2.2 JAXB技术
       2.3 Telnet技术
       2.4 IP网络技术
       2.5 Jython语言
       2.6 Java EE平台
       2.7 GNS3 工具
       2.8 SVN 工具
       2.9 本章小结

第三章 系统需求分析与概要设计
       3.1 系统整体概述
       3.2 系统需求分析
       3.3 系统概要设计
       3.4 本章小结

第四章 系统业务逻辑层和数据层的详细设计与实现
       4.1 业务逻辑层概述
       4.2 业务逻辑层的详细设计
         4.2.1 与服务层的接口设计
         4.2.2 配置模块
         4.2.3 XML映射模块
         4.2.4 控制模块
         4.2.5 额外设备信息处理（物理IP与telnet密码）
       4.3 业务逻辑层的实现
         4.3.1 控制模块的逻辑代码――服务层的接口实现（配置、测试、保存所用到的getXMLString、Import所用到的parseXML）
         4.3.2 配置的核心代码（java代码与所调用的python代码）以及log的获取
         4.3.3 XML映射的makeCommand、parseCommand代码
         4.3.4 额外设备信息处理的setMap代码，以及单例模式的应用
         4.3.5 引用路径的统一解决
       4.4 数据层概述
       4.5 数据层的详细设计
         4.5.1 XML各标签的定义
         4.5.2 XML数据映射到java类的定义
       4.6 数据层的实现
         4.6.1 一个XML的testcase样例
         4.6.2 一个java类的样例
       4.7 本章小结

第五章 总结与展望
       5.1 总结
       5.2 展望

参考文献
致谢
